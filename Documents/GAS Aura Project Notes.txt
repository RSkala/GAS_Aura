
=================================
GAS Project Notes
=================================

https://www.udemy.com/course/unreal-engine-5-gas-top-down-rpg

==================================================================
General Notes:

* When moving C++ files around, make sure you delete Intermediate and Binaries directories. Then Genereate VS Project files.
* Can create a derived C++ Blueprint class by right-clicking on the C++ Class in the Content Browser and click "Create C++ class derived from X"

TObjectPtr:
* Has access tracking and lazy loading
* Standard is to use TObjectPtr for member variables

EditAnywhere:

==================================================================
4. Base Character Class

Base Character Class for Game:
* AuraCharacterBase
  * UCLASS(Abstract)
  * Reference:
    * /Script/CoreUObject.Class'/Script/Aura.AuraCharacterBase'


Player Character:
/Script/Engine.Blueprint'/Game/Blueprints/Character/Aura/BP_AuraCharacter.BP_AuraCharacter'
C:/Dev/Unreal-Projects/GAS_Aura/Content/Blueprints/Character/Aura/BP_AuraCharacter.uasset

NOTE:

USceneComponent::SetupAttachment() adds the parent and optional socket name to attach to when a scenecomponent is added. (that is, it specifies what the new SceneComponent is being attached TO)

Example:
	TObjectPtr<USkeletalMeshComponent> Weapon;
	...
	Weapon = CreateDefaultSubobject<USkeletalMeshComponent>("Weapon");
	Weapon->SetupAttachment(GetMesh(), FName("WeaponHandSocket"));
	-> Here, the Weapon SkeletalMeshComponent is attaching itself to the Mesh inherited from the ACharacter.


==================================================================
6. Character Blueprint

Selected Mesh in Blueprint Components (inherited from ACharacter)
* 

Adding Weapon / Socket to BP_AuraCharacter:

* Added socket to hand_l in the SKM_Aura SkeletalMesh
  * Open / Edit the SkeletalMesh
  * In the Skeleton Tree, select the bone, right click -> Add Socket.
  * Named the socket EXACTLY as named in the C++: WeaponHandSocket
    * Weapon->SetupAttachment(GetMesh(), FName("WeaponHandSocket"));
  * We can visualize/position the new socket by right click -> Add Preview Asset -> SKM_Staff
    * Rotate the WeaponHandSocket by -90 so it faces forward
  * To preview with an animation:
    * Preview Scene tab: Animation -> Preview Controller -> Use Specific Animation
      * For testing, used Cast_FireBolt.
      * Moved the weaponHandSocket around so it looked better in Aura's hand

* Back in the BP_AuraCharacter, select the Weapon SkeletalMeshComponent:
  * Change Skeletal Mesh Asset to Staff

Did same with BP_Goblin_Spear


/Script/Engine.Blueprint'/Game/Blueprints/Character/Aura/BP_AuraCharacter.BP_AuraCharacter'
/Script/Engine.Blueprint'/Game/Blueprints/Character/Goblin_Spear/BP_Goblin_Spear.BP_Goblin_Spear'

==================================================================
7. Animation Blueprints

Create Animation Blueprint
* Right click -> Animation -> Animation Blueprint
* Choose a Skeleton asset:  SK_Aura
* Created file:  ABP_Aura

Creating Animation Graph:
* Right click AnimGraph -> State Machine
* Run the State Machine through a Slot before connecting to "Output Pose"
* Slots are for playing Montages

Blend Space
-> Find in the Asset Browser in the Animation Blueprint

Note that the IdleWalkRun BlendSpace was already created.
This saved time for the course.
TODO: How to create a BlendSpace

Event Graph:
* Override - Blueprint Initialize Animation 
* Get Character Movement , on Variables -> Character in Event Graph
* The purpose of this was so we could access the Character Movement Component in Blueprint Update Animation
* Set the "GroundSpeed" variable from the Character Movement's XY Velocity
* Use the GroundSpeed variable to "drive" the BlendSpace

BP_AuraCharacter:
* Select the Mesh, then set the AnimClass to ABP_Aura

---------------
Enemies
* For enemies, we will make a "Template" Animation Blueprint to be used for all of our enemy animation blueprints
* Right Click -> Animation -> Animation Blueprint -> Template tab

This is set up just like Aura, EXCEPT:
* In the AnimgGraph, in the "Main States", instead of dragging an IdleWalkRun BlendSpace in a:
  * Add a "Blend Space Player" -- a generic node.
Windows: Event Graph, Anim Graph, State (for IdleWalkRun)

ABP_Enemy
-> ABP_Goblin_Spear
   * Window -> Asset Override Editor
   * ABP_Enmy->AnimGraph->Main States->IdleWalkRun->Blendspace Player-> BS_GoblinSpear_IdleRun 

BP_Goblin_Spear
* Mesh -> Animation -> Animation Class -> ABP_Goblin_Spear

BP_Goblin_Slingshot + ABP_Goblin_Slingshot


==================================================================
8. Enhanced Input

Input Action
* Required for Enhanced Input in order to take input from a device

Content Browser->Right click->Input->Input Action 

IA_Move
* /Script/EnhancedInput.InputAction'/Game/Blueprints/Input/InputActions/IA_Move.IA_Move'
* Value Type: Axis2D (Vector2D)
* Axis2D / Vector2D because MOVEMENT will be considered in a 2D Space
  * Note that this is DIFFERENT from the Unreal Axes (which is X-forward, Y-right, Z-up)
* X Axis = Left / Right
* Y Axis = Up / Down
* WASD
  * W+S => Forward / Back => Y Axis
  * A+D => Left / Right   => X Axis

---

Input Mapping Context
* Link Input Actions to a Character via Input Mapping Context

IMC_AuraContext
Add Input Actions:
* Mappings->Plus Button->Select IA_Move
  * D - RIGHT => Positive X Input
    * Left as is 
  * A - LEFT  => Negative X Input
    * Modifier -> Negate
    * Expand and uncheck Y and Z since those have no meaning in our X axis input
  * W - UP (FORWARD) => Positive Y Input
    * Modifier -> Swizzle Input Axis Values
    * Expand and note the order, which is YXZ
    * By default, input goes into the X axis first
    * So this "Swizzle" will feed data into the Y value first instead
  * A - DOWN (BACKWARD) => Negative Y Input
    * Modifier -> Negate
    * Modifier => Swizzle Input Axis Values, YXZ

NOTE:
* You can handle input either in the player character class or the player controller class
* It is better to handle movement input in the player controller

==================================================================
9. Aura Player Controller

Aura.Build.cs:
* Ensure we have access to the "Enhanced Input Module"
* C:\Dev\Unreal-Projects\GAS_Aura\Source\Aura\Aura.Build.cs
* Added "EnhancedInput" to the public dependencies:
  PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "EnhancedInput" });

NOTE:
* After adding the AuraPlayerController cpp files, I needed to delete the Intermediates and Binaries directories. You MUST shut down Visual Studio in order to delete the Intermediates directory.
* Then you must right click the uproject file -> Generate Visual Studio Project Files
  * If you don't do this, then the VS solution will be broken when you open it (stuff missing)
* You will probably need to select Aura in the Solution Explorer, right click -> Set as startup project

Subsystems:  Are essentially Singletons

Add an InputMappingContext in the Player Controller by first getting the UEnhancedInputLocalPlayerSubsystem.
Then adding the mapping context to the subsystem:

	UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(GetLocalPlayer());
	Subsystem->AddMappingContext(AuraInputMappingContext, 0);

==================================================================
10. Movement Input

PlayerController already has a InputComponent variable.
It actually stores an object of type UEnhancedInputComponent:

UEnhancedInputComponent* EnhancedInputComponent = CastChecked<UEnhancedInputComponent>(InputComponent);


Note that the FRotator constructor has the order weird:
FORCEINLINE TRotator( T InPitch, T InYaw, T InRoll );

	=> (Y-angle, Z-angle, X-angle)

So we have to use it like this:

const FRotator CurrentControlRotation = GetControlRotation();
const FRotator YawRotation(0.0f, CurrentControlRotation.Yaw, 0.0f);

---
We know the InputComponent is of type UEnhancedInputComponent because we can verify the following:

Edit->Project Settings->Engine->Input->Default Classes
* Default Player Input Class:  EnhancedPlayerInput
* Default Input Component Class: EnhancedInputComponent

Apply player's movement input to the directions using the input:
AddMovementInput
* ControlledPawn->AddMovementInput(ForwardDirection, InputAxisVector.Y);
* ControlledPawn->AddMovementInput(RightDirection, InputAxisVector.X);

=> This likely applies a normalized Vector2D input to the player's current direction


==================================================================

11. Game Mode

Game Mode is set in the World Settings

C++ Class:
AAuraGameModeBase : GameModeBase

Blueprint:
BP_AuraGameMode : AuraGameModeBase
* Settings:
  * Player Controller Class:  BP_AuraPlayerController
  * Default Pawn Class:       BP_AuraCharacter

StartupMap:
* GameMode Override:  BP_AuraGameMode

Add Player Start in Map via add button at top of Level menu:
* Basic->Player Start

Added Camera and Spring Arm to the BP_AuraCharacter Blueprint

SpringArm Settings:
* Rotated SpringArm to -45 degrees around Y
* Set Target Arm Length to 750
* Camera Settings->Use Pawn Control Rotation = FALSE (default)
  * We dont want to rotate the spring arm with the controller
* Enable Camera Lag: TRUE


Camera Settings:
* Camera Options->Use Pawn Control Rotation = FALSE (default)
  * This is the ensure the camera will truly be fixed


AuraCharacter.cpp:
This wasn't auto-included, I needed to manually add this in order to use UCharacterMovmentComponent:
#include "GameFramework/CharacterMovementComponent.h"

Update:
When running game, camera would rotate when pressing movement inputs (WASD)
FIX:
* In BP_AuraCharacter, select SpringArm:
  * Camera Settings, set all of these to FALSE:
    * Inherit Pitch, Inherit Yaw, Inherit Roll  => ALL UNCHECKED


ABP_Aura:
* Changed states a little, added Idle and renamed IdleWalkRun to Running
* Added bool ShouldMove
* In Event Blueprint Update Animation, set ShouldMove to true, if GroundSpeed < 3.0 (Note: This seems backwards -- maybe this is just for the transitions. This value should be renamed to something like ShouldTransitionToMoveAnimation). Update: He actually made a mistake, as he pointed out, should be > 3.0
"ShouldMove" should be True if GroundSpeed is GREATER THAN 3
* In transitions to and from Idle and Running, check the value of ShouldMove

In Idle state, make sure Loop Animation is TRUE


==================================================================
12. Enemy Interface

To create a C++ interface class:
* Right-click->Create C++ Class->

Note that a UINTERFACE() class will be created, but you don't use that.
You use the the one generated below, e.g.
class AURA_API IEnemyInterface


Pure Virtual Function:
virtual void HighlightActor() = 0;
* No definition provided, class is now considered abstract

When accessing pointers of Interfaces use:

TScriptInterface<T>


==================================================================
