========================
Section 5 - RPG Game UI
========================

============================================================
27. Game UI Architecture

* Model, View, Controller

Widgets:
* UUserWidget

Model, View, Controller:
3 Different Domains:
* View: Widgets, UI elements
* Model: Data that drives the widgets
* Controller: Responsible for retrieving data from the model and passing to the view (Widget Controller)

Classes to build:
* UAuraUserWidget
* UAuraWidgetController
* AAuraHUD

============================================================
28. Aura User Widget and Widget Controller

* AuraUserWidget
* AuraWidgetController

Create a C++ Widget:
* New C++ Class->All Classes->Visual->Widget->User Widget

Widget Controller:
* Just a simple Object:
* New C++ Class->Object

The WidgetController will not know what widgets its associated with.
The Widgets will know what their controller is.

============================================================
29. Globe Progress Bar

Event Pre Construct:
* Called before the game starts
* For configuring how a widget is supposed to look

WBP_GlobeProgressBar (Widget Blueprint)
SizeBox
* Size: Desired
* Child Layout:
  * Width Override:  250
  * Height Override: 250
  * Overlay: Everything gets stacked under this. This is what Overlays are good for.
    * Image
    * Progress Bar
      * Style -> 
        * Fill Image, changed fill color and opacity to white (so the image shows)
        * Draw As: Change from "Box" to "Image"
        * Background Image -> Tint -> Alpha = 0 (to hide the background)
        * Bar Fill Type: Bottom to Top


SizeBox
 |- Overlay
     |- Image
     |- Progress Bar
     |- Image

Widgets:
* Event Pre Construct
  * This allows you to set and preview changes in your widget

NOTE:
* Create a function from a bunch of selected nodes:
* Select all, Right-Click, then Collapse to Function


Brush-> Use for images in Widgets
* Type: Structure - Slate Brush

For the Image, we exposed as a variable, and called Set Brush using a variable we created named Background Brush
In the Details of the Background Brush variable, we set the Default value to some Ring texture

============================================================
30. Health Globe

WBP_Overlay
 |- Canvas Panel

Note:
* Canvas Panel is more expensive so use them sparingly if possible
* Use SizeBox and Overlay when possible, as they are more efficient (e.g. like WBP_GlobeProgressBar)

To quickly view what the overlay will look in the game, edit the Level Blueprint:
* Open Level Blueprint and open Graph
* In Event BeginPlay, Right-click->User Interface->Create Widget
* Set the Class to WBP_Overlay
* Drag off from the Return Value and select Add to Viewport

To make variables Instance-editable:
* Click the eyeball icon (so it is an open eye). Now you can edit the globe in the overlay.

============================================================
31. Aura HUD

Set HUD Class in Game Mode
* Open the Game Mode -> Classes -> HUD Class

Create HUD Class:
* New C++ Class -> HUD

Note:
* AHUD is NOT a widget blueprint. It derives from AActor.

In order to select the WidgetClass, select the Class Defaults tab:

	UPROPERTY(EditAnywhere)
	TSubclassOf<class UAuraUserWidget> OverlayWidgetClass;

EditAnywhere seems to allow private access in the class

============================================================
32. Overlay Widget Controller

USTRUCT:
* Basically a C++ struct with reflection
* USTRUCT objects are NOT handled by garbage collection

More info on USTRUCT:
https://medium.com/@wojtek.zinczuk/hey-guys-a14f5e770045

We will only have one OverlayWidgetController.
We will put the OWC in the HUD (AuraHUD)

Moving WidgetController initialization out of AAuraHUD::BeginPlay as we need access to the widget controller params

checkf:
* just like check but also prints a formatted string to the crash log

checkf(OverlayWidgetClass, TEXT("Overlay Widget Class unitialized. Fill out BP_AuraHUD"));
checkf(OverlayWidgetControllerClass, TEXT("Overlay Widget Controller Class unitialized. Fill out BP_AuraHUD"));

----
When is AAuraHUD::InitOverlay ready with everything?
* When are where are all the key variables initialized?
* My guess:
  * PossessedBy (server, although widgets shouldnt be created on server)
  * OnRep_PlayerState (client)
    * AcknowledgePossession (client, but not on this project because of settings)

AAuraCharacter::InitAbilityActorInfo

HUD is accessible from the PlayerController

Remember:
* On the server, the server has ALL of the player controllers.
* On a client, the client ONLY has its OWN player controller. The others will be null.

BP_AuraHUD
* Set OverlayWidgetClass here

Confirm that the widget controller was set:

We added this to AAuraUserWidget:

	// We need a BeginPlay-like function to call as soon as the WidgetController is set
	UFUNCTION(BlueprintImplementableEvent)
	void WidgetControllerSet();

So we can add this event in the Blueprint Graph to check if valid

============================================================
33. Broadcasting Initial Values

We use Dynamic Multicast Delegates because we can assign Events in Blueprints with them.

* Dynamic: Can be used in Blueprints
* Multicast: Because multiple Blueprints can bind to the delegate

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnHealthChangedSignature, float, NewHealth);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMaxHealthChangedSignature, float, NewMaxHealth);

* Using "Signature" at the end to specify this is the signature of the delegate (not required, but helpful)
* The "Signature" makes it clear this is the delegate TYPE and the "OnHealthChanged" is the Delegate itself:

UPROPERTY(BlueprintAssignable, Category = "GAS|Attributes") // NOTE: The "bar" allows for subcategories in Details, e.g. GAS -> Attributes
FOnHealthChangedSignature OnHealthChanged;


Remember these attribute getters were generated via a macro:

  // Broadcast the real value of attributes
  OnHealthChanged.Broadcast(AuraAttributeSet->GetHealth());
  OnMaxHealthChanged.Broadcast(AuraAttributeSet->GetMaxHealth());

Changed UOverlayWidgetController from UCLASS to:
UCLASS(BlueprintType, Blueprintable)

UCLASS specifiers:
* BlueprintType: Can be used as a variable in Blueprints and Blueprint Event Graphs
* Blueprintable: Can make a Blueprint based on the class

Now that UOverlayWidgetController is Blueprintable, we created a Blueprint BP_OverlayWidgetController
and then changed the OverlayWidgetController class to BP_OverlayWidgetController (instead of a raw C++ class)

In the WBP_HealthGlobe (which has its own WidgetController, which is set from the WBP_Overlay graph)
On WidgetControllerSet, we BIND the event OnHealthChanged_Event
by dragging and selecting "Assign On Health Changed"
 (and did the same with Assign On Max Health Changed)

NOTE:
* Assign seems to create the event node for you
* Bind only creates the execution node, and you have to make an event and connect the pins
  * So basically the same, but you have to do more steps


We Set Progress Bar Health whenever Health gets set and whenever MaxHealth gets set

--
To clean up Blueprint Graphs, use a Sequence:
* Right-click->Utilities->Flow Control->Sequence
* Performs the execution pins in sequence
* This way, you dont have to have super long chains of nodes

============================================================
34. Listening for Attribute Changes

The UAbilitySystemComponent already has a delegate for handling attribute changes:

AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate()

Note that FOnGameplayAttributeValueChange is NOT Dynamic so we can't use AddDynamic.
So we have to use AddUObject or AddUFunction


DECLARE_MULTICAST_DELEGATE_OneParam(FOnGameplayAttributeValueChange, const FOnAttributeChangeData&);


void HealthChanged(const struct FOnAttributeChangeData& AttributeChangeData) const;

const UAuraAttributeSet* const AuraAttributeSet = CastChecked<UAuraAttributeSet>(AttributeSet);

AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(
  AuraAttributeSet->GetHealthAttribute()).AddUObject(this, &UOverlayWidgetController::HealthChanged);

AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(
  AuraAttributeSet->GetMaxHealthAttribute()).AddUObject(this, &UOverlayWidgetController::MaxHealthChanged);


void UOverlayWidgetController::HealthChanged(const FOnAttributeChangeData& AttributeChangeData) const
{
  UE_LOG(LogOverlayWidgetController, Log, TEXT("UOverlayWidgetController::HealthChanged - %s"), *GetName());
  OnHealthChanged.Broadcast(AttributeChangeData.NewValue);
}

--------------------
We put BindCallbacksToDependencies() AuraHUD::GetOverlayWidgetController()
as this is where the OverlayWidgetController is created and events are bound here

--------------------
This is all set up for the Dependencies are all only one way:
* Our AbilitySystemComponent knows nothing about the OverlayWidgetController
* OverlayWidgetController knows nothing of the widgets that are bound to its delegates

============================================================
35. Callbacks for Mana Changes

* Mostly copy-paste duplicating from Health, except with Mana

Also changed the pickup effect in AAuraEffectActor::OnBeginOverlap:

    UAuraAttributeSet* MutableAuraAttributeSet = const_cast<UAuraAttributeSet*>(AuraAttributeSet);
    MutableAuraAttributeSet->SetHealth(AuraAttributeSet->GetHealth() + 25.0f);
    MutableAuraAttributeSet->SetMana(AuraAttributeSet->GetMana() - 25.0f);

------------------
To quickly test multiplayer:

In Play drop-down:
* Number of players: 2
* Net Mode: Play as Listen Server

============================================================
