=======================
Section 4 - Attributes
=======================

============================================================
23. Attributes

-----------------------------------
* We can have multiple AttributeSets
* Multiple AttributeSets must be of a different class type
* You can't have more that one AttributeSet of the same class type
* It is perfectly acceptable to have all of your Attributes on the same AttributeSet
  
Example:
* Primary Attributes
* Secondary Attributes
* Tertiary Attributes

What are attributes?
* Numerical quantities associated with some character
* ALL attributes are floats
* FGameplayAttributeData:  Attributes exist in this struct

You can apply attributes values directly but the preferred way is through a Gameplay Effect

Prediction:
The client doesnt need to wait for the server's permission to change a value.
The value can change immediately client-side and the server is informed of the change.
The server can roll back changes that are invalid.

-----------------------------------
FGameplayAttributeData
* Base Value
* Current Value

Base Value: Permament
Current Value: Temporary Effects

Note: Base Value is not always the "max" value, as it could change! Instead, you have a "MaxValue" attribute.

Example:

Attribute Set:
* Health
* MaxHealth
* Mana
* MaxMana

So, a Health Bar could show:
Fraction: Health / MaxHealth

============================================================
24. Health and Mana

To Replicate a variable:
* It needs to be marked as Replicated and have a "RepNotify"
    (Note: There is also a specifier "Replicated")

	UPROPERTY(ReplicatedUsing = OnRep_Health)
	FGameplayAttributeData Health;

An OnRep function must be a UFUNCTION()
An OnRep function can have zero arguments or 1 argument and that parameter must be of the same type.
If you do add a parameter, it will be the Old value, which is extremely useful.

In order for the Gameplay Ability System to process these changes use:
GAMEPLAYATTRIBUTE_REPNOTIFY

This will notify the GAS that "Health" has just been Replicated:
GAMEPLAYATTRIBUTE_REPNOTIFY(UAuraAttributeSet, Health, OldHealth);

In order to use replication, you MUST also override the function GetLifetimeReplicatedProps() in order to replicate any variables.

virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;

DOREPLIFETIME_CONDITION_NOTIFY => You can set a condition in order for the variable to be replicated

DOREPLIFETIME_CONDITION_NOTIFY(UAuraAttributeSet, Health, COND_None, REPNOTIFY_Always);

============================================================
