=================================================
Section 3 - Intro to the Gameplay Ability System
=================================================

GAS Basics:
* Attributes & Abilities

* Attributes:
  Examples: Life, Damage, Critical Hit Chance

* Abilities:
  Examples: Play Animation, Cause Damage, Gain XP, Level up

* Effects:
  Change Attribute Values
  e.g. Buffs, Debuffs can be applied

* Cues:
  Visual & Audio Cues, e.g. Particles and Sounds

Notes:
* GAS is fully replicated
* Easily scalable
* The Gameplay Ability System was originally built for the game Paragon

============================================================
16. The Main Parts of GAS

1. Ability System Component
2. Attribute Set
3. Gameplay Ability
4. Ability Task
5. Gameplay Effect
6. Gameplay Cue
7. Gameplay Tag



* Ability System Component:
  * Added to an actor
  * Granting abilities
  * Handling Notifications
  * Must be added to a character in order for a character to use GAS

* Attribute Set
  * Attributes stored in the attribute set
  * Life, Mana, etc
  * Store attributes on attribute set

* Gameplay Ability
  * Classes used to encapsulate the functionality of "things" a character can do

* Abilty Task
  * Asychronous
  * the "workers"

* Gameplay Effect
  * Change abilities

* Gameplay Cue
  * Particle effects and sounds
  * Handles replication of these

* Gameplay Tag
  * These are not uniquely GAS 
  * These exist outside of GAS
  * Extremely useful and used throughout GAS
  * Example: Abilities.Lightning.Shock


You can add an Ability System Component and an Attribute Set to:
* Pawn
* Player State

Note:
* If you put it on the Pawn and the Pawn is destroyed, to ASC and AS are also destroyed!
* So it is better to put on the Player State (which persists when the Pawn is destroyed)
* Also putting on the Player State keeps the character class cleaner
* However, putting the GAS stuff on an AI might be simpler.

In this project:

Enemy Character
* An Enemy Character (AuraEnemy) will have the ASC and AS directly on the Enemy Character

Player Controlled Character
* Will have the ASC and AS on the Player State

First Steps:
1. Player State class
2. Ability System Component
3. Attribute Set

============================================================
17. The Player State

Adding Player State

Change Player State used by the game by opening the Game Mode class

Game Mode Blueprint->Classes->Player State Class

Game Mode:     BP_AuraGameMode
Player State:  BP_AuraPlayerState

Our Ability System Component and Attribute Set are going to "live" on the Player State (for the player)

============================================================
18. Ability System Component and Attribute Set

Enable GAS:
In order to use GAS, you must enable the Plugin first:
* Edit->Plugins->Gameplay->Gameplay Abilities
  * Check the box and restart the editor

* This updates the uproject file and enables in the plugin 

-------------------------------------
IMPORTANT NOTE:
* In order to build the project, you MUST add the following modules in the Aura.Build.cs:

Documentation here:
https://docs.unrealengine.com/4.27/en-US/InteractiveExperiences/GameplayAbilitySystem/

From the Docs:
PublicDependencyModuleNames.AddRange(new string[] { "GameplayAbilities", "GameplayTags", "GameplayTasks", "Core", "CoreUObject", "Engine", "InputCore", "HeadMountedDisplay" });

Note that the course adds them to the "PrivateDependencyModuleNames" instead of Public

Modules Documentation:
https://dev.epicgames.com/documentation/en-us/unreal-engine/gameplay-modules-in-unreal-engine?application_version=5.1

https://ikrima.dev/ue4guide/build-guide/build-target-file-demystified/#publicdependencymodulenames-vs-privatedependencymodulenames

NOTE:
* You need to refresh the VS project files after adding module dependencies

-----------------------------------

Creating an ASC class:
* Content Browser->Right-click->New C++ Class->ActorComponent->GameplayTasksComponent->AbilitySystemComponent
  * Subclass of UAbilitySystemComponent, which is ultimately a UActorComponent

Creating an Attribute Set:
* Content Browser->Right-click->New C++ Class->Object->AttributeSet
  * Subclass of UAttributeSet


AuraAbilitySystemComponent
* This will be the base class for all ASC's in the project

AuraAttributeSet
* Attribute Set for the project

============================================================
19. GAS in Multiplayer

Dedicated Server:
* No human player
* No rendering to a screen

Listen Server:
* Is a human player (e.g. Hosting)
* Host has the advantage - no lag

Server is the Authority
* Server is always the "Correct" version of the game
* We do "important" things on the Server

-------------------
Game Mode:
* ONLY exists on the Server (will be null on clients)

Player Controller:
* Each client each has their own player controller. 
* Server has a Player Controller for EACH player

Player States:
* All Player States exists on Server
* All Player States also exist on each client (as well as the Pawns)

HUD & Widgets
* Each client has its own HUD class and Widgets
* No HUD or widgets on server

-------------------
Replication:
* When data is transferred from the Server to clients, this is called Replication
* Replication only works in ONE direction (i.e. from Server to Clients)
* If a variable is marked as "Replicated", it should not be changed on the Client
  * If it IS updated on a Client, then it would be considered "incorrect" and "out of sync"

RPC's:
* Remote Procedure Calls. This is how a Client can update and not be out of sync.
* GAS handles a lot of this under the hood

============================================================
20. Construction the ASC and AS

Add Components and subobjects to an object using CreateDefaultSubobject:

AbilitySystemComponent = CreateDefaultSubobject<UAuraAbilitySystemComponent>("AbilitySystemComponent");
AttributeSet = CreateDefaultSubobject<UAuraAttributeSet>("AttributeSet");


  UPROPERTY()
  TObjectPtr<class UAbilitySystemComponent> AbilitySystemComponent;

  UPROPERTY()
  TObjectPtr<class UAttributeSet> AttributeSet;


In order to use the ability system, you need to implement the IAbilitySystemInterface interface:

class AURA_API AAuraCharacterBase : public ACharacter, public IAbilitySystemInterface

In order to do this, the "GameplayAbilities" module needed to be moved into the PublicDependencyModuleNames in the Aura.Build.cs file
 (and therefore moved out of the PrivateDependencyModuleNames).

Also had to manually add this include in the header AuraCharacterBase.h 
#include "AbilitySystemInterface.h"

We need this so we can implement the pure virtual method GetAbilitySystemComponent:

/** Returns the ability system component to use for this actor. It may live on another actor, such as a Pawn using the PlayerState's component */
virtual UAbilitySystemComponent* GetAbilitySystemComponent() const = 0;

============================================================
